{
  "Print to console": {
    "prefix": "clg",
    "body": ["console.log($1)"],
    "description": "Log output to console"
  },
  "Print with label": {
    "prefix": "clo",
    "body": ["console.log('$1',$1)", "$2"],
    "description": "Log output to console"
  },
  "Print string": {
    "prefix": "cls",
    "body": ["console.log('$1')"],
    "description": "Log output to console"
  },
  "JavaScript map function with const": {
    "prefix": "jmap",
    "body": ["const ${1} = ${2}.map((${3}) => (", "\t$4", "))"],
    "description": "JavaScript map function with const"
  },
  "JavaScript map function with filter": {
    "prefix": "jfilter",
    "body": ["const ${1} = ${2}.filter((${3}) => (", "\t$4", "))"],
    "description": "JavaScript map function with filter"
  },
  "Javascript find function with const": {
    "prefix": "jfind",
    "body": ["const ${1} = ${2}.find((${3}) => (", "\t$4", "))"],
    "description": "Javascript find function with const"
  },
  "JavaScript string parse": {
    "prefix": "jparse",
    "body": ["JSON.parse(${1})"],
    "description": "JavaScript string parse"
  },
  "JavaScript string stringify": {
    "prefix": "jsfy",
    "body": ["JSON.stringify(${1})"],
    "description": "JavaScript string stringify"
  },
  "React functional component": {
    "prefix": "rfc",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t${1:${TM_FILENAME_BASE}}",
      "\t\t</div>",
      "\t);",
      "}",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "React functional component"
  },
  "React functional component with default export": {
    "prefix": "rfc",
    "body": [
      "export default function ${1:${TM_FILENAME_BASE}} () {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t${1:${TM_FILENAME_BASE}}",
      "\t\t</div>",
      "\t);",
      "}"
    ],
    "description": "React functional component with default export"
  },
  "Async react functional component": {
    "prefix": "rfc",
    "body": [
      "export default async function ${1:${TM_FILENAME_BASE}} () {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t${1:${TM_FILENAME_BASE}}",
      "\t\t</div>",
      "\t);",
      "}"
    ],
    "description": "Async react functional component"
  },
  "UseState": {
    "prefix": "us",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/pascalcase}/}] = useState(${2:initialValue});"
    ],
    "description": "UseState"
  },
  "UseEffect": {
    "prefix": "ue",
    "body": ["useEffect(() => {", "\t$1", "}, [])"],
    "description": "UseEffect"
  },
  "Object Desctructuring": {
    "prefix": "od",
    "body": ["const {${1}} = ${2};"],
    "description": "Object Desctructuring"
  },
  "Anonymous function": {
    "prefix": "anf",
    "body": ["(${1}) => {", "\t$3", "}"],
    "description": "Anonymous function"
  },
  "Arrow function": {
    "prefix": "af",
    "body": ["const ${1} = (${2}) => {", "\t$3", "}"],
    "description": "Arrow function"
  },
  "JSX map function": {
    "prefix": "rmap",
    "body": ["{${1}.map((${2}) => (", "\t<div key={${3}}>${4}</div>", "))}"],
    "description": "JSX map function"
  },
  "JSX filter function": {
    "prefix": "rfilter",
    "body": ["{${1}.filter((${2}) => (", "\t${3}", "))}"],
    "description": "JSX filter function"
  },
  "JSX find function": {
    "prefix": "rfind",
    "body": ["{${1}.find((${2}) => (", "\t${3}", "))}"],
    "description": "JSX find function"
  },
  "JSX ternary operator": {
    "prefix": "rtern",
    "body": ["{${1} ? ${2} : ${3}}"],
    "description": "JSX ternary operator"
  },

  "Redux useSelector": {
    "prefix": "usl",
    "body": [
      "const ${1:state} = useSelector((state) => state.${2:slice}.${3:data});"
    ],
    "description": "Redux useSelector"
  },
  "Redux useDispatch": {
    "prefix": "udis",
    "body": [
      "const dispatch = useDispatch();",
      "dispatch(${1:action}(${2:payload}));"
    ],
    "description": "Redux useDispatch"
  },
  "Redux reducer": {
    "prefix": "red",
    "body": [
      "${1:name} : (state,action) => {",
      "state.${2:name2} = ${3:name3};",
      "}"
    ],
    "description": "Redux reducer"
  },
  "Redux extra reducers": {
    "prefix": "ered",
    "body": [
      "builder.addCase(${1:action}.pending, (state, action) => {",
      "state.${2:name} = ${3:name}",
      "})",
      "builder.addCase(${1:action}.fulfilled, (state, action) => {",
      "state.${2:name} = ${3:name}",
      "})",
      "builder.addCase(${1:action}.rejected, (state, action) => {",
      "state.${2:name} = ${3:name}",
      "})"
    ],
    "description": "Redux extra reducers"
  },
  "Redux createAsyncThunk": {
    "prefix": "asthunk",
    "body": [
      "export const ${1:action} = createAsyncThunk(",
        "'${2:slice}/${1:action}',",
        "async (${3:payload},{rejectWithValue}) => {",
          "const {${4:data}}= {${3:payload}};",
          "try {",
            "const {data} = await API.${5:api}(${6:values});",
            "return data;",
          "} catch (error) {",
            "return rejectWithValue(error);",
          "}",
        "}",
      ");"

    ]
  }
}
